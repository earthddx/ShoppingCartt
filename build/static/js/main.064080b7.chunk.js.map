{"version":3,"sources":["Context.js","components/Header.js","components/CartItem.js","pages/Cart.js","components/Image.js","utils/index.js","pages/Photos.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","Header","cartClassName","useContext","cartItems","length","to","className","CartItem","item","useState","hovered","setHovered","removeFromCart","iconClassName","onClick","onMouseEnter","onMouseLeave","src","url","width","price","Cart","buttonText","setButtonText","emptyCart","priceItems","setPriceItems","totalCostDisplay","toLocaleString","style","currency","cartItemElements","map","key","id","setTimeout","console","log","Image","img","toggleFavorite","addToCart","isFavorite","some","getClass","i","Photos","imageElements","allPhotos","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","children","setAllPhotos","setCartItems","useEffect","fetch","then","res","json","data","Provider","value","updatedArr","photo","newItem","prevItems","prevPrice","filter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.064080b7.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\"\r\n\r\nconst Context = React.createContext()\r\n\r\nfunction ContextProvider({children}) {\r\n    const [allPhotos, setAllPhotos] = useState([])\r\n    const [cartItems, setCartItems] = useState([])\r\n    const [priceItems, setPriceItems] = useState(0)\r\n    \r\n    const url = \"https://raw.githubusercontent.com/earthddx/ShoppingCartt/master/images.json\"\r\n    useEffect(() => {\r\n        fetch(url)\r\n            .then(res => res.json())\r\n            .then(data => setAllPhotos(data))\r\n    }, []) //fecth data from images.json when component renders\r\n    \r\n    function toggleFavorite(id) { \r\n        const updatedArr = allPhotos.map(photo => {//map the array of all photos \r\n            if(photo.id === id) {                   //to see if the photo we favorited is in the array\r\n                return {...photo, isFavorite: !photo.isFavorite} //if so, return a new obect with !isFavorite\r\n            }\r\n            return photo                                //if not, return the object\r\n        })\r\n        \r\n        setAllPhotos(updatedArr) //update array of all photos with new isFavorite property\r\n    }\r\n    \r\n    function addToCart(newItem) {\r\n        setCartItems(prevItems => [...prevItems, newItem]) //every time a new item added to the cart, \r\n        setPriceItems(prevPrice => prevPrice + newItem.price)// we have to calculate total price\r\n    }\r\n    \r\n    function removeFromCart(newItem) {\r\n        setCartItems(prevItems => prevItems.filter(item => item.id !== newItem.id)) //if the item is removed from cart\r\n        setPriceItems(prevPrice => prevPrice - newItem.price)//calculate total price again\r\n    }\r\n    \r\n    function emptyCart() { //empty cart after order is complete\r\n        setCartItems([])\r\n    }\r\n    \r\n    return (\r\n        <Context.Provider value={{\r\n            allPhotos, \r\n            toggleFavorite, \r\n            cartItems, \r\n            addToCart, \r\n            removeFromCart, \r\n            emptyCart,\r\n            priceItems,\r\n            setPriceItems\r\n        }}>\r\n            {children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport {ContextProvider, Context} //export both instead of just 'Context.provider' so we could use Context ","import React, {useContext} from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {Context} from \"../Context\"\r\n\r\nfunction Header() {\r\n    const {cartItems} = useContext(Context)\r\n    const cartClassName = cartItems.length ? \"ri-shopping-cart-fill\" : \"ri-shopping-cart-line\" //display emty shopping cart if its emty, full otherwise\r\n    return (\r\n        <header>\r\n            <Link to=\"/\"><h2>ShoppingCartt</h2></Link>\r\n            <Link to=\"/cart\">\r\n                <i className={`${cartClassName} ri-fw ri-2x`}></i>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, {useState, useContext} from \"react\"\r\nimport {Context} from \"../Context\"\r\n\r\nfunction CartItem({item}) {\r\n    const [hovered, setHovered] = useState(false)\r\n    const {removeFromCart} = useContext(Context)\r\n    \r\n    const iconClassName = hovered ? \"ri-delete-bin-fill\" : \"ri-delete-bin-line\"\r\n    \r\n    return (\r\n        <div className=\"cart-item\">\r\n            <i \r\n                className={iconClassName} \r\n                onClick={() => removeFromCart(item)}\r\n                onMouseEnter={() => setHovered(true)}\r\n                onMouseLeave={() => setHovered(false)}\r\n            >\r\n            </i>\r\n            \r\n            <img src={item.url} width=\"130px\" />\r\n            <p>${item.price}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartItem","import React, {useState, useContext} from \"react\"\r\nimport {Context} from \"../Context\"\r\nimport CartItem from \"../components/CartItem\"\r\n\r\nfunction Cart() {\r\n    const [buttonText, setButtonText] = useState(\"Place Order\")\r\n    const {cartItems, emptyCart, priceItems, setPriceItems} = useContext(Context)\r\n    const totalCostDisplay = priceItems.toLocaleString(\"en-US\", {style: \"currency\", currency: \"USD\"})\r\n    \r\n    const cartItemElements = cartItems.map(item => (\r\n        <CartItem key={item.id} item={item} />\r\n    ))\r\n    \r\n    function placeOrder() {\r\n        setButtonText(\"Ordering...\")\r\n        setTimeout(() => {\r\n            console.log(\"Order placed!\")\r\n            setButtonText(\"Place Order\")\r\n            emptyCart()\r\n            setPriceItems(0)\r\n        }, 3000)  //not actual order effect, just a timer for 3 sec\r\n    }\r\n    \r\n    return (\r\n        <main className=\"cart-page\">\r\n            <h1>Check out</h1>\r\n            {cartItemElements}\r\n            <p className=\"total-cost\">Total: {totalCostDisplay}</p>\r\n            {\r\n                cartItems.length ?    //render order button if there are any items in the cart\r\n                <div className=\"order-button\">\r\n                    <button onClick={placeOrder}>{buttonText}</button>\r\n                </div> :\r\n                <p className=\"no-items\">You have no items in your cart</p>//otherwise display no items added\r\n            }\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Cart","import React, {useState, useContext} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {Context} from \"../Context\"\r\n\r\nfunction Image({className, img}) {\r\n    const [hovered, setHovered] = useState(false)\r\n    const {toggleFavorite, addToCart, cartItems, removeFromCart} = useContext(Context)\r\n    \r\n    function heartIcon() { //'Heart' icon on the image\r\n        if(img.isFavorite) { //'Heart' toggler\r\n            return <i className=\"ri-heart-fill favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-heart-line favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        }\r\n    }\r\n    \r\n    function cartIcon() {           //'Shopping Cart' icon on the image\r\n        const alreadyInCart = cartItems.some(item => item.id === img.id)//if the item was already added\r\n        if(alreadyInCart) {         //another click on the icon will remove it from cart         \r\n            return <i className=\"ri-shopping-cart-fill cart\" onClick={() => removeFromCart(img)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-add-circle-line cart\" onClick={() => addToCart(img)}></i>//and add it again. pretty much a toggler function\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={`${className} image-container`}\r\n            onMouseEnter={() => setHovered(true)} //when the mouse enter the image area, set hovered state to true\r\n            onMouseLeave={() => setHovered(false)}//if it leaves, to false\r\n        >\r\n            <img src={img.url} className=\"image-grid\"/> {/* display the image */}\r\n            {heartIcon()}\r\n            {cartIcon()}\r\n        </div>\r\n    )\r\n}\r\n\r\nImage.propTypes = {\r\n    className: PropTypes.string,  //prop types to ensure the properties will be of a specific type\r\n    img: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        url: PropTypes.string.isRequired,\r\n        isFavorite: PropTypes.bool\r\n    })\r\n}\r\n\r\nexport default Image\r\n","\r\n//grid styling of elements of the home page\r\nexport function getClass(i) {\r\n    if (i % 20 === 0) {\r\n        return 'wide'\r\n    }\r\n\r\n    else if (i % 5 === 0) {\r\n        return 'big';\r\n    }\r\n    else if (i % 6 === 0) {\r\n        return 'wide'\r\n    }\r\n\r\n}","import React, {useContext} from \"react\"\r\nimport Image from \"../components/Image\"\r\nimport {Context} from \"../Context\"\r\nimport {getClass} from \"../utils\"\r\n\r\nfunction Photos() {\r\n    const {allPhotos} = useContext(Context)\r\n    \r\n    const imageElements = allPhotos.map((img, i) => (\r\n        <Image key={img.id} img={img} className={getClass(i)} />\r\n    ))\r\n    \r\n    return (\r\n        <main className=\"photos\">\r\n            {imageElements}\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Photos","import React from 'react'\nimport {Switch, Route} from \"react-router-dom\"\nimport Header from \"./components/Header\"\nimport Cart from \"./pages/Cart\"\nimport Photos from \"./pages/Photos\"\n\n\nfunction App() {\n  return (\n    <div>\n        <Header />\n        <Switch>\n            <Route exact path=\"/\">\n                <Photos />\n            </Route>\n\n            <Route path=\"/cart\">\n                <Cart />\n            </Route>\n        </Switch>\n    </div>\n)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {BrowserRouter as Router} from \"react-router-dom\"\nimport {ContextProvider} from \"./Context\"\nimport App from './App'\nimport './styles.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <ContextProvider>\n        <Router>\n            <App />\n        </Router>\n    </ContextProvider>, \n    document.getElementById(\"root\")\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}