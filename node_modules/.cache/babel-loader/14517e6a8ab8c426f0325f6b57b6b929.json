{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\User\\\\my-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\my-app\\\\src\\\\components\\\\Image.js\";\nimport React, { useState, useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Context } from \"../Context\";\n\nfunction Image({\n  className,\n  img\n}) {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        hovered = _useState2[0],\n        setHovered = _useState2[1];\n\n  const _useContext = useContext(Context),\n        toggleFavorite = _useContext.toggleFavorite,\n        addToCart = _useContext.addToCart,\n        cartItems = _useContext.cartItems,\n        removeFromCart = _useContext.removeFromCart;\n\n  function heartIcon() {\n    //'Heart' icon on the image\n    if (img.isFavorite) {\n      //'Heart' toggler\n      return React.createElement(\"i\", {\n        className: \"ri-heart-fill favorite\",\n        onClick: () => toggleFavorite(img.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      });\n    } else if (hovered) {\n      return React.createElement(\"i\", {\n        className: \"ri-heart-line favorite\",\n        onClick: () => toggleFavorite(img.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      });\n    }\n  }\n\n  function cartIcon() {\n    //'Shopping Cart' icon on the image\n    const alreadyInCart = cartItems.some(item => item.id === img.id); //if the item was already added\n\n    if (alreadyInCart) {\n      //another click on the icon will remove it from cart         \n      return React.createElement(\"i\", {\n        className: \"ri-shopping-cart-fill cart\",\n        onClick: () => removeFromCart(img),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      });\n    } else if (hovered) {\n      return React.createElement(\"i\", {\n        className: \"ri-add-circle-line cart\",\n        onClick: () => addToCart(img),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }); //and add it again. pretty much a toggler function\n    }\n  }\n\n  return React.createElement(\"div\", {\n    className: `${className} image-container`,\n    onMouseEnter: () => setHovered(true) //when the mouse enter the image area, set hovered state to true\n    ,\n    onMouseLeave: () => setHovered(false) //if it leaves, to false\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: img.url,\n    className: \"image-grid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), \" \", heartIcon(), cartIcon());\n}\n\nImage.propTypes = {\n  className: PropTypes.string,\n  //prop types to ensure the properties will be of a specific type\n  img: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n    isFavorite: PropTypes.bool\n  })\n};\nexport default Image;","map":{"version":3,"sources":["C:/Users/User/my-app/src/components/Image.js"],"names":["React","useState","useContext","PropTypes","Context","Image","className","img","hovered","setHovered","toggleFavorite","addToCart","cartItems","removeFromCart","heartIcon","isFavorite","id","cartIcon","alreadyInCart","some","item","url","propTypes","string","shape","isRequired","bool"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,QAA0C,OAA1C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SAAQC,OAAR,QAAsB,YAAtB;;AAEA,SAASC,KAAT,CAAe;AAACC,EAAAA,SAAD;AAAYC,EAAAA;AAAZ,CAAf,EAAiC;AAAA,oBACCN,QAAQ,CAAC,KAAD,CADT;AAAA;AAAA,QACtBO,OADsB;AAAA,QACbC,UADa;;AAAA,sBAEkCP,UAAU,CAACE,OAAD,CAF5C;AAAA,QAEtBM,cAFsB,eAEtBA,cAFsB;AAAA,QAENC,SAFM,eAENA,SAFM;AAAA,QAEKC,SAFL,eAEKA,SAFL;AAAA,QAEgBC,cAFhB,eAEgBA,cAFhB;;AAI7B,WAASC,SAAT,GAAqB;AAAE;AACnB,QAAGP,GAAG,CAACQ,UAAP,EAAmB;AAAE;AACjB,aAAO;AAAG,QAAA,SAAS,EAAC,wBAAb;AAAsC,QAAA,OAAO,EAAE,MAAML,cAAc,CAACH,GAAG,CAACS,EAAL,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFD,MAEO,IAAGR,OAAH,EAAY;AACf,aAAO;AAAG,QAAA,SAAS,EAAC,wBAAb;AAAsC,QAAA,OAAO,EAAE,MAAME,cAAc,CAACH,GAAG,CAACS,EAAL,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AACJ;;AAED,WAASC,QAAT,GAAoB;AAAY;AAC5B,UAAMC,aAAa,GAAGN,SAAS,CAACO,IAAV,CAAeC,IAAI,IAAIA,IAAI,CAACJ,EAAL,KAAYT,GAAG,CAACS,EAAvC,CAAtB,CADgB,CACgD;;AAChE,QAAGE,aAAH,EAAkB;AAAU;AACxB,aAAO;AAAG,QAAA,SAAS,EAAC,4BAAb;AAA0C,QAAA,OAAO,EAAE,MAAML,cAAc,CAACN,GAAD,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KAFD,MAEO,IAAGC,OAAH,EAAY;AACf,aAAO;AAAG,QAAA,SAAS,EAAC,yBAAb;AAAuC,QAAA,OAAO,EAAE,MAAMG,SAAS,CAACJ,GAAD,CAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP,CADe,CACkE;AACpF;AACJ;;AAED,SACI;AACI,IAAA,SAAS,EAAG,GAAED,SAAU,kBAD5B;AAEI,IAAA,YAAY,EAAE,MAAMG,UAAU,CAAC,IAAD,CAFlC,CAE0C;AAF1C;AAGI,IAAA,YAAY,EAAE,MAAMA,UAAU,CAAC,KAAD,CAHlC,CAG0C;AAH1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKI;AAAK,IAAA,GAAG,EAAEF,GAAG,CAACc,GAAd;AAAmB,IAAA,SAAS,EAAC,YAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,OAMKP,SAAS,EANd,EAOKG,QAAQ,EAPb,CADJ;AAWH;;AAEDZ,KAAK,CAACiB,SAAN,GAAkB;AACdhB,EAAAA,SAAS,EAAEH,SAAS,CAACoB,MADP;AACgB;AAC9BhB,EAAAA,GAAG,EAAEJ,SAAS,CAACqB,KAAV,CAAgB;AACjBR,IAAAA,EAAE,EAAEb,SAAS,CAACoB,MAAV,CAAiBE,UADJ;AAEjBJ,IAAAA,GAAG,EAAElB,SAAS,CAACoB,MAAV,CAAiBE,UAFL;AAGjBV,IAAAA,UAAU,EAAEZ,SAAS,CAACuB;AAHL,GAAhB;AAFS,CAAlB;AASA,eAAerB,KAAf","sourcesContent":["import React, {useState, useContext} from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport {Context} from \"../Context\"\r\n\r\nfunction Image({className, img}) {\r\n    const [hovered, setHovered] = useState(false)\r\n    const {toggleFavorite, addToCart, cartItems, removeFromCart} = useContext(Context)\r\n    \r\n    function heartIcon() { //'Heart' icon on the image\r\n        if(img.isFavorite) { //'Heart' toggler\r\n            return <i className=\"ri-heart-fill favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-heart-line favorite\" onClick={() => toggleFavorite(img.id)}></i>\r\n        }\r\n    }\r\n    \r\n    function cartIcon() {           //'Shopping Cart' icon on the image\r\n        const alreadyInCart = cartItems.some(item => item.id === img.id)//if the item was already added\r\n        if(alreadyInCart) {         //another click on the icon will remove it from cart         \r\n            return <i className=\"ri-shopping-cart-fill cart\" onClick={() => removeFromCart(img)}></i>\r\n        } else if(hovered) {\r\n            return <i className=\"ri-add-circle-line cart\" onClick={() => addToCart(img)}></i>//and add it again. pretty much a toggler function\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div \r\n            className={`${className} image-container`}\r\n            onMouseEnter={() => setHovered(true)} //when the mouse enter the image area, set hovered state to true\r\n            onMouseLeave={() => setHovered(false)}//if it leaves, to false\r\n        >\r\n            <img src={img.url} className=\"image-grid\"/> {/* display the image */}\r\n            {heartIcon()}\r\n            {cartIcon()}\r\n        </div>\r\n    )\r\n}\r\n\r\nImage.propTypes = {\r\n    className: PropTypes.string,  //prop types to ensure the properties will be of a specific type\r\n    img: PropTypes.shape({\r\n        id: PropTypes.string.isRequired,\r\n        url: PropTypes.string.isRequired,\r\n        isFavorite: PropTypes.bool\r\n    })\r\n}\r\n\r\nexport default Image\r\n"]},"metadata":{},"sourceType":"module"}